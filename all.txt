# Ravindra Games Hub — Supabase-ready GitHub Pages bundle

This textdoc contains a ready-to-use, GitHub Pages–friendly project scaffold for **Ravindra Games Hub** using **Supabase** for Auth + Global Leaderboard (Top 10), PWA support, mobile optimizations, and demo game pages (TicTacToe & Mastermind).

**Decisions you confirmed:**
- Leaderboard shows **Top 10 globally** by score.  
- Auth: **Google Login only** (simple setup).  
- Splash background: **#1a1a1a (dark)**.

---

## How to use
1. Create a new public GitHub repo.  
2. Copy the files below into the repo (structure shown).  
3. Create a Supabase project and the `scores` table (SQL provided).  
4. Create `/leaderboard/config.js` by copying `config.example.js` and filling your Supabase values.  
5. Push to GitHub and enable GitHub Pages.

---

## Repo structure (files included below)
```
ravindra-games-hub/
├── index.html
├── style.css
├── app.js
├── manifest.json
├── sw.js
├── README.md
├── /assets/
│   ├── icons/icon-192.png
│   ├── icons/icon-512.png
│   └── splash/* (generated)
├── /games/
│   ├── tictactoe/index.html
│   └── mastermind/index.html
├── /leaderboard/
│   ├── index.html
│   ├── leaderboard.js
│   ├── submit-helper.js
│   └── config.example.js
└── /auth/
    ├── login.html
    └── auth.js
```

---

## 1) SQL to create `scores` table (run in Supabase SQL editor)
```sql
create table public.scores (
  id bigint generated by default as identity primary key,
  game_id text not null,
  player_id text,
  player_name text not null,
  score numeric not null,
  created_at timestamptz default now()
);
create index on public.scores (game_id);
create index on public.scores (score desc);
```

---

## 2) Files

### /leaderboard/config.example.js
```javascript
// Rename to config.js and fill with your Supabase values
export const SUPABASE_URL = 'https://your-project.supabase.co';
export const SUPABASE_ANON_KEY = 'your-anon-key';
```

---

### /leaderboard/submit-helper.js
```javascript
// Attempts to post score to Supabase if /leaderboard/config.js exists.
// Falls back to localStorage if config missing or network error.
async function tryImportConfig(){
  try{ return await import('./config.js'); } catch(e){ return null; }
}

window.submitScore = async function(gameId, numericScore, playerName='anon'){
  const cfg = await tryImportConfig();
  if(cfg && cfg.SUPABASE_URL && cfg.SUPABASE_ANON_KEY){
    try{
      const { createClient } = await import('https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm');
      const supabase = createClient(cfg.SUPABASE_URL, cfg.SUPABASE_ANON_KEY);
      const { error } = await supabase.from('scores').insert({ game_id: gameId, player_name: playerName, score: numericScore });
      if(error) throw error;
      console.log('Score submitted to Supabase');
      return { ok:true, remote:true };
    }catch(err){
      console.warn('Supabase submit failed, saving locally', err.message || err);
    }
  }
  // fallback local save
  const key = `rg_scores_${gameId}`;
  const arr = JSON.parse(localStorage.getItem(key) || '[]');
  arr.push({name:playerName, score:numericScore, ts:Date.now()});
  arr.sort((a,b)=>b.score - a.score);
  localStorage.setItem(key, JSON.stringify(arr.slice(0,200)));
  console.log('Score saved locally');
  return { ok:true, remote:false };
}
```

---

### /leaderboard/index.html
```html
<!doctype html>
<html lang="hi">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Leaderboard — Ravindra Games Hub</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <div class="container">
    <header style="display:flex;justify-content:space-between;align-items:center">
      <h2>Global Leaderboard</h2>
      <div>
        <a href="/auth/login.html" class="chip">Sign in (Google)</a>
      </div>
    </header>

    <section style="margin-top:12px">
      <label>Filter game: </label>
      <select id="gameFilter">
        <option value="tictactoe">Tic Tac Toe</option>
        <option value="mastermind">Mastermind</option>
      </select>
    </section>

    <section id="leaderboardList" style="margin-top:12px"></section>

    <p style="margin-top:18px;color:var(--muted)">Top 10 scores are shown. If Supabase config is missing, local scores (from this device) are shown.</p>
  </div>

  <script type="module" src="/leaderboard/leaderboard.js"></script>
</body>
</html>
```

---

### /leaderboard/leaderboard.js
```javascript
import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

// Try to import config (config.example.js -> user creates config.js)
let SUPABASE_URL = null, SUPABASE_ANON_KEY = null; 
try{ const cfg = await import('./config.js'); SUPABASE_URL = cfg.SUPABASE_URL; SUPABASE_ANON_KEY = cfg.SUPABASE_ANON_KEY; }catch(e){/* no config */}

const hasRemote = SUPABASE_URL && SUPABASE_ANON_KEY;
const supabase = hasRemote ? createClient(SUPABASE_URL, SUPABASE_ANON_KEY) : null;

const gameFilter = document.getElementById('gameFilter');
const listEl = document.getElementById('leaderboardList');

async function loadTop(gameId){
  listEl.innerHTML = '<div style="color:var(--muted)">Loading...</div>';
  if(hasRemote){
    const { data, error } = await supabase.from('scores').select('*').eq('game_id', gameId).order('score', { ascending:false }).limit(10);
    if(error){ listEl.innerHTML = '<div style="color:crimson">Error loading scores</div>'; console.error(error); return; }
    if(!data || data.length===0){ listEl.innerHTML = '<div style="color:var(--muted)">No scores yet.</div>'; return; }
    renderRows(data);
  } else {
    const key = `rg_scores_${gameId}`;
    const arr = JSON.parse(localStorage.getItem(key) || '[]');
    if(arr.length===0){ listEl.innerHTML = '<div style="color:var(--muted)">No local scores yet.</div>'; return; }
    renderRows(arr.slice(0,10));
  }
}

function renderRows(rows){
  listEl.innerHTML = rows.map((r,i)=>`<div class="score-row"><div><strong>${i+1}. ${escapeHtml(r.player_name||r.name||'anon')}</strong><div class="muted">${new Date(r.created_at||r.ts||Date.now()).toLocaleString()}</div></div><div class="score">${r.score}</div></div>`).join('');
}

function escapeHtml(s){ return String(s).replace(/[&<>"']/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":"&#39;" })[c]); }

loadTop(gameFilter.value);
gameFilter.addEventListener('change', ()=> loadTop(gameFilter.value));
```

---

### /auth/login.html
```html
<!doctype html>
<html lang="hi">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Sign in — Ravindra Games Hub</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <div class="container">
    <h2>Sign in with Google</h2>
    <button id="googleSign" class="btn">Sign in with Google</button>
    <p style="margin-top:12px;color:var(--muted)">After login you will be redirected back to the leaderboard.</p>
  </div>
  <script type="module" src="/auth/auth.js"></script>
</body>
</html>
```

---

### /auth/auth.js
```javascript
// This file uses Supabase client for OAuth (Google). Use config.js in leaderboard folder.
let SUPABASE_URL = null, SUPABASE_ANON_KEY = null; 
try{ const cfg = await import('../leaderboard/config.js'); SUPABASE_URL = cfg.SUPABASE_URL; SUPABASE_ANON_KEY = cfg.SUPABASE_ANON_KEY; }catch(e){ alert('Supabase config missing. Create /leaderboard/config.js from config.example.js'); }
if(SUPABASE_URL && SUPABASE_ANON_KEY){
  const { createClient } = await import('https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm');
  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
  document.getElementById('googleSign').addEventListener('click', ()=>{
    supabase.auth.signInWithOAuth({ provider: 'google', options: { redirectTo: location.origin + '/leaderboard/index.html' } });
  });
}
```

---

### /games/tictactoe/index.html (simple playable demo)
```html
<!doctype html>
<html lang="hi">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Tic Tac Toe — Ravindra Games Hub</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <div class="container">
    <h2>Tic Tac Toe</h2>
    <div id="board" class="tic-grid"></div>
    <div style="margin-top:12px"><button id="reset" class="chip">Reset</button></div>
  </div>
  <script>
    // Minimal TicTacToe: human vs AI (random)
    const boardEl = document.getElementById('board');
    let board = Array(9).fill(null), turn='X', over=false, moves=0;
    function render(){ boardEl.innerHTML = board.map((c,i)=>`<button class="cell">${c||''}</button>`).join(''); document.querySelectorAll('.cell').forEach((el,i)=>el.addEventListener('click', ()=>play(i)));
    }
    function play(i){ if(over||board[i]) return; board[i]=turn; moves++; check(); if(!over){ aiMove(); } render(); }
    function aiMove(){ const empties = board.map((v,i)=>v?null:i).filter(x=>x!==null); if(empties.length===0) return; const pick = empties[Math.floor(Math.random()*empties.length)]; board[pick]='O'; moves++; check(); }
    function check(){ const wins=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]; for(const w of wins){ const [a,b,c]=w; if(board[a] && board[a]===board[b] && board[a]===board[c]){ over=true; const winner=board[a]; setTimeout(()=>onGameOver(winner==='X'?100:50),100); return; } }
      if(board.every(Boolean)){ over=true; setTimeout(()=>onGameOver(20),100); }
    }
    function onGameOver(score){ // higher better
      // score: X win 100, O win 50, tie 20
      window.submitScore && window.submitScore('tictactoe', score, 'player'); alert('Game over — score: '+score);
    }
    document.getElementById('reset').addEventListener('click', ()=>{ board=Array(9).fill(null); over=false; moves=0; render(); });
    render();
  </script>
</body>
</html>
```

---

### /games/mastermind/index.html (simple demo)
```html
<!doctype html>
<html lang="hi">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Mastermind — Ravindra Games Hub</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <div class="container">
    <h2>Mastermind (4 slots, 6 colors)</h2>
    <div id="gameArea"></div>
    <div style="margin-top:12px"><button id="restart" class="chip">Restart</button></div>
  </div>
  <script>
    // Simple Mastermind: randomly generate code of 4 colors (0..5). Player guesses via prompts.
    let secret = Array.from({length:4}, ()=>Math.floor(Math.random()*6));
    let attempts = 0;
    async function makeGuess(){
      const guessStr = prompt('Enter 4 digits (0-5) e.g. 0123'); if(!guessStr) return;
      const guess = guessStr.split('').map(Number);
      attempts++;
      let exact = 0, colorOnly=0;
      const sCopy = [...secret];
      for(let i=0;i<4;i++) if(guess[i]===sCopy[i]){ exact++; sCopy[i]=null; }
      for(let i=0;i<4;i++){
        if(guess[i]!==secret[i]){
          const idx = sCopy.indexOf(guess[i]); if(idx!==-1){ colorOnly++; sCopy[idx]=null; }
        }
      }
      const msg = `Attempt ${attempts}: exact=${exact}, color=${colorOnly}`;
      alert(msg);
      if(exact===4){ const score = Math.max(0, 100 - attempts*10); window.submitScore && window.submitScore('mastermind', score, 'player'); alert('You cracked it! Score: '+score); }
    }
    document.getElementById('gameArea').innerHTML = '<button id="guessBtn" class="btn">Make Guess</button>';
    document.getElementById('guessBtn').addEventListener('click', makeGuess);
    document.getElementById('restart').addEventListener('click', ()=>{ secret = Array.from({length:4}, ()=>Math.floor(Math.random()*6)); attempts=0; alert('New code generated'); });
  </script>
</body>
</html>
```

---

### index.html (root)
```html
<!doctype html>
<html lang="hi">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Ravindra Games Hub</title>
  <meta name="theme-color" content="#1a1a1a">
  <link rel="manifest" href="/manifest.json">
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <div class="container">
    <header style="display:flex;justify-content:space-between;align-items:center">
      <div class="brand"><div class="logo">RG</div><div><h1>Ravindra Games Hub</h1><p class="lead">Quick browser games — PWA-ready</p></div></div>
      <div>
        <a class="chip" href="/leaderboard/index.html">Leaderboard</a>
        <a class="chip" href="/auth/login.html">Sign in</a>
      </div>
    </header>

    <main>
      <section class="grid" id="gamesGrid">
        <article class="game-card"><img class="thumb" src="/assets/icons/icon-512.png"><div class="content"><h3>Tic Tac Toe</h3><p>Classic X vs O</p><a class="play-btn" href="/games/tictactoe/index.html">Play ▶</a></div></article>
        <article class="game-card"><img class="thumb" src="/assets/icons/icon-512.png"><div class="content"><h3>Mastermind</h3><p>Guess the color code</p><a class="play-btn" href="/games/mastermind/index.html">Play ▶</a></div></article>
      </section>
    </main>

    <footer style="margin-top:20px;color:var(--muted)">© 2025 Ravindra</footer>
  </div>

  <script src="/leaderboard/submit-helper.js"></script>
  <script>
    // Lazy register SW
    if('serviceWorker' in navigator){ navigator.serviceWorker.register('/sw.js').then(()=>console.log('sw registered')); }
  </script>
</body>
</html>
```

---

### style.css
```css
:root{--bg:#f7f8fb;--card:#fff;--text:#0f172a;--muted:#475569;--accent:#0ea5a3}
[data-theme='dark']{--bg:#071024;--card:#071a2b;--text:#e6eef8;--muted:#9fb3c8;--accent:#22c1c3}
*{box-sizing:border-box}
body{margin:0;font-family:Inter,system-ui, sans-serif;background:var(--bg);color:var(--text)}
.container{max-width:980px;margin:18px auto;padding:16px}
.brand{display:flex;gap:12px;align-items:center}
.logo{width:48px;height:48px;border-radius:10px;background:linear-gradient(135deg,var(--accent),#60a5fa);display:grid;place-items:center;color:white;font-weight:700}
.grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:14px;margin-top:18px}
.game-card{background:var(--card);border-radius:10px;overflow:hidden;box-shadow:0 6px 18px rgba(2,6,23,.06)}
.thumb{width:100%;height:140px;object-fit:cover}
.content{padding:10px}
.play-btn{display:inline-block;margin-top:8px;padding:8px 10px;border-radius:8px;background:var(--accent);color:white;text-decoration:none}
.chip{background:var(--card);padding:8px 12px;border-radius:999px;border:1px solid rgba(0,0,0,.06);text-decoration:none;color:var(--text)}
.tic-grid{display:grid;grid-template-columns:repeat(3,80px);gap:6px}
.cell{width:80px;height:80px;font-size:28px}
@media(max-width:520px){.tic-grid{grid-template-columns:repeat(3,60px)}.cell{width:60px;height:60px}}
.score-row{display:flex;justify-content:space-between;padding:8px 6px;border-bottom:1px dashed rgba(0,0,0,.06)}
.muted{color:var(--muted);font-size:12px}
```

---

### manifest.json
```json
{
  "name":"Ravindra Games Hub",
  "short_name":"RGames",
  "start_url":"/",
  "display":"standalone",
  "background_color":"#1a1a1a",
  "theme_color":"#1a1a1a",
  "icons":[
    {"src":"/assets/icons/icon-192.png","sizes":"192x192","type":"image/png"},
    {"src":"/assets/icons/icon-512.png","sizes":"512x512","type":"image/png"},
    {"src":"/assets/icons/maskable.png","sizes":"512x512","type":"image/png","purpose":"maskable"}
  ]
}
```

---

### sw.js (improved caching strategy)
```javascript
const CACHE_NAME = 'rg-shell-v1';
const PRECACHE = ['/', '/index.html', '/style.css', '/manifest.json', '/assets/icons/icon-192.png', '/assets/icons/icon-512.png'];
self.addEventListener('install', e => e.waitUntil(caches.open(CACHE_NAME).then(c => c.addAll(PRECACHE)).then(() => self.skipWaiting())));
self.addEventListener('activate', e => e.waitUntil(caches.keys().then(keys => Promise.all(keys.filter(k=>k!==CACHE_NAME).map(k=>caches.delete(k)))).then(()=>self.clients.claim())));
self.addEventListener('fetch', e => {
  if(e.request.method !== 'GET') return;
  const url = new URL(e.request.url);
  if(url.origin !== location.origin){
    // network-first for external
    e.respondWith(fetch(e.request).then(resp=>{ caches.open(CACHE_NAME).then(c=>c.put(e.request, resp.clone())); return resp; }).catch(()=>caches.match(e.request)));
    return;
  }
  // cache-first for app shell
  e.respondWith(caches.match(e.request).then(r=>r || fetch(e.request).then(resp=>{ caches.open(CACHE_NAME).then(c=>c.put(e.request, resp.clone())); return resp; })).catch(()=>caches.match('/index.html')));
});
```

---

### README.md
```markdown
# Ravindra Games Hub

Simple collection of web games (TicTacToe, Mastermind) — PWA-ready and Supabase-backed leaderboard.

## Quick start
1. Create a Supabase project and run the SQL to create `scores` table.
2. Copy `leaderboard/config.example.js` to `leaderboard/config.js` and add your SUPABASE_URL and SUPABASE_ANON_KEY.
3. Push to GitHub and enable Pages (branch: main).
4. Open site, sign-in (Google) and play — Top 10 scores will appear in Leaderboard.

## Notes
- For production security: implement an Edge Function that uses Supabase service_role key to accept signed score submissions.
- Keep `leaderboard/config.js` out of public commits if you prefer secrecy; use server-side secrets instead.

---
```

---

## Final notes & next steps
- I added all code into this canvas document. Copy files into your repo as-is.
- If you want, paste your `SUPABASE_URL` and `SUPABASE_ANON_KEY` here and I will generate the exact `/leaderboard/config.js` content for you to paste into your repo.  
- After you deploy, test on a mobile device and tap “Add to Home Screen” to see the splash screen (background #1a1a1a) and icons.

बताइए: क्या मैं अब `/assets/icons/` के लिए ready-to-download PNG placeholders (data URIs) भी canvas में add कर दूँ ताकि आप सीधे repo में रख सकें?
